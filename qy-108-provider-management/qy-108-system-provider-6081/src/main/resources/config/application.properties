server.port=8081
server.servlet.context-path=/

spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/qy_108?useSSL=false
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.username=root
spring.datasource.password=123456
#下面的配置常用
#因为咱们写的是后台管理系统 也就是说系统开发搭建完毕 mysql中几必须会有一些常用数据
#角色数据 用户数据 菜单数据 字典数据
#实现当springboot项目启动 就会默认去初始化数据库 自动的创建数据表以及表中的数据
#按照springboot的官方文档来看 以上的操作都是分开的
#也就是说官方推荐使用是spring.datasource.schema配置去初始化表 表示空的 没数据
#其实 spring.datasource.schema 既可以初始化表也可以初始化表数据
spring.datasource.schema=classpath:sql/qy_108.sql
官方推荐使用spring.datasrouce.data配置去初始化表中的数据
# 官方推荐使用spring.datasource.data配置去初始化表中的数据
# spring.datasource.data=
# 配置初始化模式(一共有三个值)
# always:总是会加载，也就是说项目启动一次就加载一次(只会第一次使用)
# never:永远都不会加载，无论项目启动多少次都不再去加载这个SQL文件了
# embedded:初始化内存数据库(redis)，初始化的并不是关系型数据库
spring.datasource.initialization-mode=never

mybatis.type-aliases-package=com.aaa.kay.model
mybatis.mapper-locations=classpath:mapper/*Mapper.xml
#让通用mapper直接遵循驼峰命名规则 不需要咋实体类中使用哦Column注解标识
#假设数据库的表名t_dept Dept(@Table)
#在t_dept的表中会有很多的字段(dept_name,dept_no)，这个时候映射实体类的时候还必须使用一个注解(@Column)
# 配置完以下的配置之后，就可以直接实现映射，不需要使用@Column注解了
mybatis.configuration.map-underscore-to-camel-case=true
spring.application.name=system-interface
eureka.client.service-url.defaultZone=http://eureka01:7081/eureka,http://eureka02:7082/eureka,http://eureka03:7083/eureka
eureka.instance.instance-id=system-interface-8081

info.app.name=interface-system-provider
info.app.port=8081
info.author.name=kaykay
info.company.name=AAA 
#关于通用mapper的常用配置
#配置自增主键的厕所 可以不配置 没有人是mysql
mapper.identity=MYSQL
#配置通用mapper的通用类
mapper.mappers=tk.mybatis.mapper.common.Mapper
#设置insert和update中 是否判断字符串类型
# update set user where 1 = 1 <if test="username != null"> and username = #{username}</if>
# 这么一种写法就是如果传递了username你就给我更新，如果我没有传递，则你不用给我更新
# 配置了以下内容之后，只需要写update set user where user_id = #{userId} 自动判断是否为空
mapper.not-empty=true
# 因为项目中会大量的使用枚举，因为枚举类型在通用mapper中不认识，也就是说在通用mapper中把枚举转换为简单的类型来进行处理
mapper.enum-as-simple-type=true
#之前咱们写分页都是自己进行封装(Page类--->int pageNo, int pageSize, Object data)
# 现在可以直接使用分页插件来代替，非常好用(github上开源)--->pageHelper
# 分页插件的配置
pagehelper.helper-dialect=mysql
pagehelper.params=count=countSql
pagehelper.reasonable=false
pagehelper.support-methods-arguments=true